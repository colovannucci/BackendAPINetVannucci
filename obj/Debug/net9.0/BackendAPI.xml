<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BackendAPI</name>
    </assembly>
    <members>
        <member name="T:BackendAPI.Configurations.DependencyInjectionConfig">
            <summary>
            Configuración para la inyección de dependencias.
            </summary>
        </member>
        <member name="M:BackendAPI.Configurations.DependencyInjectionConfig.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registra los servicios y repositorios en el contenedor de dependencias.
            </summary>
            <param name="services">El contenedor de servicios.</param>
        </member>
        <member name="T:BackendAPI.Controllers.WeatherController">
            <summary>
            Controlador para manejar las solicitudes relacionadas con el clima.
            </summary>
        </member>
        <member name="M:BackendAPI.Controllers.WeatherController.#ctor(BackendAPI.Services.IWeatherService)">
            <summary>
            Inicializa una nueva instancia de <see cref="T:BackendAPI.Controllers.WeatherController"/>.
            </summary>
            <param name="weatherService">El servicio de clima.</param>
        </member>
        <member name="M:BackendAPI.Controllers.WeatherController.GetWeatherForecast">
            <summary>
            Obtiene el pronóstico del clima para los próximos días.
            </summary>
            <returns>Una lista de objetos <see cref="T:BackendAPI.Models.WeatherForecast"/>.</returns>
        </member>
        <member name="T:BackendAPI.Models.WeatherForecast">
            <summary>
            Representa el pronóstico del clima para un día específico.
            </summary>
        </member>
        <member name="P:BackendAPI.Models.WeatherForecast.Date">
            <summary>
            Fecha del pronóstico.
            </summary>
        </member>
        <member name="P:BackendAPI.Models.WeatherForecast.TemperatureC">
            <summary>
            Temperatura en grados Celsius.
            </summary>
        </member>
        <member name="P:BackendAPI.Models.WeatherForecast.Summary">
            <summary>
            Descripción del clima (por ejemplo, soleado, lluvioso).
            </summary>
        </member>
        <member name="T:BackendAPI.Repositories.IWeatherRepository">
            <summary>
            Define los métodos para acceder a los datos relacionados con el clima.
            </summary>
        </member>
        <member name="T:BackendAPI.Repositories.WeatherRepository">
            <summary>
            Implementación del repositorio de clima.
            </summary>
        </member>
        <member name="T:BackendAPI.Services.IWeatherService">
            <summary>
            Define los métodos para manejar la lógica de negocio relacionada con el clima.
            </summary>
        </member>
        <member name="M:BackendAPI.Services.IWeatherService.GetWeatherForecast">
            <summary>
            Obtiene el pronóstico del clima.
            </summary>
            <returns>Una lista de objetos <see cref="T:BackendAPI.Models.WeatherForecast"/>.</returns>
        </member>
        <member name="T:BackendAPI.Services.WeatherService">
            <summary>
            Implementación del servicio de clima.
            </summary>
        </member>
        <member name="M:BackendAPI.Services.WeatherService.GetWeatherForecast">
            <inheritdoc />
        </member>
    </members>
</doc>
